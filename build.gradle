buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.1'
        corda_gradle_plugins_version = '4.0.45'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'.toInteger()
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda' }    
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        baseName 'provable-corda-api'
    }
}
apply plugin: 'net.corda.plugins.cordapp'

cordapp {
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
    contract {
        name "provable-corda-api"
        vendor "Provable Things Ltd."
        licence "MIT"
        versionId 1
    }
}

// Function to compile the J2V8 dependency
def j2v8_dependency(architecture) {
    // Mapping for each different architecture given
    def archs = [
            win32:'com.eclipsesource.j2v8:j2v8_win32_x86_64:4.6.0',
            linux:'com.eclipsesource.j2v8:j2v8_linux_x86_64:4.8.0',
            macos:'com.eclipsesource.j2v8:j2v8_macosx_x86_64:4.6.0',
    ]

    if (!(architecture in archs))
        throw new GradleScriptException("$os operating system not supported.", null)

    def j2v8_dep = archs.get(architecture)

    println("Built with $j2v8_dep")

    return j2v8_dep
}

import static org.apache.tools.ant.taskdefs.condition.Os.*

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    cordaCompile "org.apache.commons:commons-lang3:3.0"
    cordaCompile "commons-codec:commons-codec:1.9"

    // Checking the current os
    if (project.hasProperty('os')) {
        compile j2v8_dependency(os)
    } else {
        if (isFamily(FAMILY_WINDOWS)) {
            compile j2v8_dependency('win32')
        } else if (isFamily(FAMILY_MAC)) {
            compile j2v8_dependency('macos')
        } else {
            compile j2v8_dependency('linux')
        }
    }
}